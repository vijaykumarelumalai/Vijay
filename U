Let's start from scratch with creating your Spring Boot project using Eclipse, followed by implementing the required code.

### Step 1: Create a New Spring Boot Project in Eclipse

1. **Open Eclipse IDE**:
   - Ensure you have the Spring Tools 4 for Eclipse installed.

2. **Create a New Spring Starter Project**:
   - Go to `File > New > Spring Starter Project`.
   - **Project Name**: `SocialMediaApp`
   - **Group**: `com.example`
   - **Artifact**: `socialmedia`
   - **Version**: Keep it default (`0.0.1-SNAPSHOT`)
   - **Packaging**: `Jar`
   - **Java Version**: `11` (or whichever version you're using)

3. **Add Dependencies**:
   - **Spring Web**: For building web applications.
   - **Spring Data JPA**: For interacting with databases using JPA.
   - **MySQL Driver**: For MySQL database connection.
   - **Thymeleaf**: For rendering HTML views.

4. **Finish**: Click `Finish` to create the project.

### Step 2: Configure Database in `application.properties`

In `src/main/resources/application.properties`, add your MySQL database configuration:

```properties
spring.datasource.url=jdbc:mysql://localhost:3306/socialmedia
spring.datasource.username=root
spring.datasource.password=yourpassword
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
```
Replace `yourpassword` with your MySQL root password.

### Step 3: Create Entity Classes

1. **User.java**
```java
package com.example.socialmedia.model;

import javax.persistence.*;
import java.util.List;

@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String username;
    private String email;
    private String password;

    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL)
    private List<Post> posts;

    // Getters and Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public List<Post> getPosts() {
        return posts;
    }

    public void setPosts(List<Post> posts) {
        this.posts = posts;
    }
}
```

2. **Post.java**
```java
package com.example.socialmedia.model;

import javax.persistence.*;
import java.util.List;

@Entity
public class Post {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String content;
    private int likes;

    @ManyToOne
    @JoinColumn(name = "user_id")
    private User user;

    @OneToMany(mappedBy = "post", cascade = CascadeType.ALL)
    private List<Comment> comments;

    // Getters and Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public int getLikes() {
        return likes;
    }

    public void setLikes(int likes) {
        this.likes = likes;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public List<Comment> getComments() {
        return comments;
    }

    public void setComments(List<Comment> comments) {
        this.comments = comments;
    }
}
```

3. **Comment.java**
```java
package com.example.socialmedia.model;

import javax.persistence.*;

@Entity
public class Comment {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String content;

    @ManyToOne
    @JoinColumn(name = "post_id")
    private Post post;

    @ManyToOne
    @JoinColumn(name = "user_id")
    private User user;

    // Getters and Setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public Post getPost() {
        return post;
    }

    public void setPost(Post post) {
        this.post = post;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }
}
```

### Step 4: Create Repository Interfaces

1. **UserRepository.java**
```java
package com.example.socialmedia.repository;

import com.example.socialmedia.model.User;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);
}
```

2. **PostRepository.java**
```java
package com.example.socialmedia.repository;

import com.example.socialmedia.model.Post;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface PostRepository extends JpaRepository<Post, Long> {
    List<Post> findAllByOrderByIdDesc();
}
```

3. **CommentRepository.java**
```java
package com.example.socialmedia.repository;

import com.example.socialmedia.model.Comment;
import org.springframework.data.jpa.repository.JpaRepository;

public interface CommentRepository extends JpaRepository<Comment, Long> {
}
```

### Step 5: Create Service Classes

1. **UserService.java**
```java
package com.example.socialmedia.service;

import com.example.socialmedia.model.User;
import com.example.socialmedia.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class UserService {
    @Autowired
    private UserRepository userRepository;

    public User save(User user) {
        return userRepository.save(user);
    }

    public Optional<User> findByUsername(String username) {
        return userRepository.findByUsername(username);
    }
}
```

2. **PostService.java**
```java
package com.example.socialmedia.service;

import com.example.socialmedia.model.Post;
import com.example.socialmedia.repository.PostRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class PostService {
    @Autowired
    private PostRepository postRepository;

    public List<Post> getAllPosts() {
        return postRepository.findAllByOrderByIdDesc();
    }

    public Post save(Post post) {
        return postRepository.save(post);
    }
}
```

3. **CommentService.java**
```java
package com.example.socialmedia.service;

import com.example.socialmedia.model.Comment;
import com.example.socialmedia.repository.CommentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class CommentService {
    @Autowired
    private CommentRepository commentRepository;

    public Comment save(Comment comment) {
        return commentRepository.save(comment);
    }
}
```

### Step 6: Create the Controller

1. **PostController.java**
```java
package com.example.socialmedia.controller;

import com.example.socialmedia.model.Comment;
import com.example.socialmedia.model.Post;
import com.example.socialmedia.service.CommentService;
import com.example.socialmedia.service.PostService;
import com.example.socialmedia.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.security.Principal;

@Controller
public class PostController {
    @Autowired
    private PostService postService;

    @Autowired
    private CommentService commentService;

    @Autowired
    private UserService userService;

    @GetMapping("/")
    public String home(Model model) {
        model.addAttribute("posts", postService.getAllPosts());
        return "index";
    }

    @PostMapping("/post")
    public String createPost(@ModelAttribute Post post, Principal principal) {
        // Assuming UserService is used to fetch user details.
        return "redirect:/";
    }

    @PostMapping("/comment")
    public String createComment(@ModelAttribute Comment comment, Principal principal) {
        // Assuming UserService is used to fetch user details.
        return "redirect:/";
    }

    @PostMapping("/like")
    public String likePost(@RequestParam Long postId) {
        // Logic to like a post
        return "redirect:/";
    }
}
```

### Step 7: Create Thymeleaf Template

1. **index.html**
```html
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <title>Social Media Platform</title>
</head>
<body>
    <h1>All Posts</h1>
    <div th:each="post : ${posts}">
        <p th:text="${post.content}"></p>
        <p>Likes: <span th:text="${post.likes}"></span></p>
        <form th:action="@{/like}" method="post">
            <input type="hidden" name="postId" th:value="${post.id}" />
            <button type="submit">Like</button>
        </form>
        <h3>
